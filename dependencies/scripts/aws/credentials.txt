#
# credentials.txt - parameters required to start up AWS instance
#
# this config file specifies your aws_access_key_id and aws_secret_access_key
# obtained from your AWS account "Security Credentials" page, look for
# "Access keys" (access key ID and secret access key)
export AWS_CONFIG_FILE=/path/to/your/aws.security.credentials

# AWS region for your instances.  Beware, not all credentials are
# necessarily available in all regions.  Resources in one region are
# not available in a different region.  Once you get started working in
# one region, you will need to stay there.
export AWS_DEFAULT_REGION=us-east-2

# the amiImageId is the AWS Linux system to use for the instance,
# these scripts are designed to work with Linux AMIs
# You may want different sizes of machines for parasol hub vs. node machines
# the hub is the NFS server for the data file system and thus needs a good
# amount of disk space.  The nodes will NFS mount that file system, and thus
# only need a high CPU count, not disk space.
export hubAmiImageId="ami-2a0f324f"
export nodeAmiImageId="ami-2a0f324f"

# still working on deciding the appropriate combination of CPUs and memory
# for debugging, the t2.micro size is in the 'free tier' category.
# export hubInstanceType="t2.micro"	# 1 CPU 1 Gb
export hubInstanceType="t2.xlarge"	# 4 CPUs 16 Gb
# export nodeInstanceType="t2.2xlarge"	# 4 CPUs 16 Gb
# export nodeInstanceType="c4.8xlarge"	# 36 CPUs 60 Gb
# export nodeInstanceType="m5.24xlarge"	# 96 CPUs 384 Gb
# export nodeInstanceType="m5.2xlarge"	# 8 CPUs 32 Gb
export nodeInstanceType="m5.4xlarge"	# 16 CPUs 64 Gb

# data storage volume.  Create this in your EC2 Management console, 
# under 'Elastic Block Store' -> Volumes
# allocate enough disk space for all data in the project
# IMPORTANT: make sure the volume is created in the same specific region as your
# instances.  us-east-2 can be either us-east-2a or us-east-2b or us-east-2c
# you will need to select one of those three

export dataVolumeId="vol-......someId....."

# this key name is the access key for IAM users:
# https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html
# This the name under which you setup your ssh keys for amazon,
# Amazon needs your 'public' ssh key, you keep your 'private' key for access:
export keyName="sshKeyName"

# this secGroupId is created in your EC2 console in the 'Security Groups'
# section.  This controls the access to your instance with network Inbound
# rules.  You want to enable IP addresses for the computers in your
# institution you desire to access the AWS instances.  Plus, you will
# need to allow access via the internal AWS network, for example:
# 172.31.0.0/16 to allow any machine in the 172.31.*.* LAN
# enable all ports for this private LAN network, no need to specify individual
# ports
export secGroupId="sg-....some id ....."

# this subnetId is used in the start instances command,
#   the secGroupId is related to this:
export subnetId="subnet-...id..."

# name of the user to login to the AWS instance
export nativeUser="ec2-user"
